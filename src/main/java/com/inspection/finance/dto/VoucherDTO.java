package com.inspection.finance.dto;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import com.inspection.finance.entity.Voucher;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * 전표 DTO
 */
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class VoucherDTO {
    
    private Long voucherId;
    private String voucherNumber;
    private String voucherTypeCode;
    private String voucherTypeName;
    private LocalDateTime transactionDate;
    private String description;
    private Long facilityId;
    private String facilitySerialNumber;  // 편의를 위한 시설물 정보
    private Long facilityTransactionId;
    private BigDecimal totalAmount;
    private String createdBy;
    private LocalDateTime createdAt;
    private boolean isAutoGenerated;
    
    @Builder.Default
    private List<VoucherItemDTO> items = new ArrayList<>();
    
    // 시설물 정보
    private String facilityManagementNumber;  // 시설물 관리번호
    private String facilityTypeName;          // 시설물 유형명
    private String brandCode;                // 브랜드 코드
    private String brandCodeName;            // 브랜드명
    
    /**
     * 엔티티를 DTO로 변환
     */
    public static VoucherDTO fromEntity(Voucher entity) {
        if (entity == null) {
            return null;
        }
        
        VoucherDTO dto = VoucherDTO.builder()
                .voucherId(entity.getVoucherId())
                .voucherNumber(entity.getVoucherNumber())
                .voucherTypeCode(entity.getVoucherType() != null ? entity.getVoucherType().getCodeId() : null)
                .voucherTypeName(entity.getVoucherType() != null ? entity.getVoucherType().getCodeName() : null)
                .transactionDate(entity.getTransactionDate())
                .description(entity.getDescription())
                .facilityId(entity.getFacility() != null ? entity.getFacility().getFacilityId() : null)
                .facilitySerialNumber(entity.getFacility() != null ? entity.getFacility().getSerialNumber() : null)
                // 시설물 추가 정보
                .facilityManagementNumber(entity.getFacility() != null ? entity.getFacility().getManagementNumber() : null)
                .facilityTypeName(entity.getFacility() != null && entity.getFacility().getFacilityType() != null ? 
                        entity.getFacility().getFacilityType().getCodeName() : null)
                // 브랜드 정보 추가
                .brandCode(entity.getFacility() != null && entity.getFacility().getBrand() != null ? 
                        entity.getFacility().getBrand().getCodeId() : null)
                .brandCodeName(entity.getFacility() != null && entity.getFacility().getBrand() != null ? 
                        entity.getFacility().getBrand().getCodeName() : null)
                // 기타 정보
                .facilityTransactionId(entity.getFacilityTransaction() != null ? 
                        entity.getFacilityTransaction().getTransactionId() : null)
                .totalAmount(entity.getTotalAmount())
                .createdBy(entity.getCreatedBy())
                .createdAt(entity.getCreatedAt())
                .isAutoGenerated(entity.isAutoGenerated())
                .build();
        
        // 전표 항목 변환
        if (entity.getItems() != null && !entity.getItems().isEmpty()) {
            dto.setItems(entity.getItems().stream()
                    .map(VoucherItemDTO::fromEntity)
                    .collect(Collectors.toList()));
        }
        
        return dto;
    }
} 